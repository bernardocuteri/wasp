#!/usr/bin/python3
import sys
import random
from random import randint

withConstants = True

arieties = []
usedVariables = []

def getRandomAtom(needSafety):
    toReturn = ""
    predicateId = randint(0, numberOfPredicates-1)
    toReturn += "p_" + str(predicateId) + "("
    for i in range(arieties[predicateId]):
        if i > 0:
            toReturn += ","
        if (randint(0, constantRatio-1) == 0 and withConstants) or (needSafety and len(usedVariables)==0):
            toReturn += str(randint(0, maxConstant-1))
        else:
            if not needSafety:
                variable = "X_" + str(randint(0, numberOfVariables-1))
                toReturn += variable
                if variable not in usedVariables:
                    usedVariables.append(variable)
            else:
                toReturn += usedVariables[randint(0, len(usedVariables)-1)]
    toReturn += ")"
    return toReturn
    
def getRandomArithmeticExpression():
    leftVariable = "X_" + str(randint(0, numberOfVariables-1))
    

    return "2>1"
    

numberOfVariables = int(sys.argv[1])
numberOfRules = int(sys.argv[2])
numberOfPredicates = int(sys.argv[3])
maxArity = int(sys.argv[4])
maxBodySize = int(sys.argv[5])
maxHeadSize = int(sys.argv[6])
maxNFacts = int(sys.argv[7])
maxConstant = int(sys.argv[8])
constantRatio = int(sys.argv[9])
maxArithmeticExpressionsPerRule = int(sys.argv[10])

encoding = open("autogenerated/encoding", "w+")
instance = open("autogenerated/testInstances/instance", "w+")
constraint = open("autogenerated/constraint", "w+")

for i in range(numberOfPredicates):
    arieties.append(randint(1, maxArity))

for i in range(numberOfRules):
    bodySize = randint(1, maxBodySize)
    headSize = randint(0, maxHeadSize)
    body = ""
    head = ""
    #numberOfNegatives = 0  # change to get negative literals in bodies
    #int numberOfNegatives = rand() % bodySize;
    numberOfNegatives = randint(0, min(2,bodySize-1))
    numberOfExpressions = randint(0, maxArithmeticExpressionsPerRule)
    for j in range(bodySize):
        if j > 0:
            body += ", "
        if j >= bodySize - numberOfNegatives:
            body += "not " + getRandomAtom(True)
        else:
            body += getRandomAtom(False)
            
    for j in range(numberOfExpressions):
        body += ", "
        body += getRandomArithmeticExpression()

    for j in range(headSize):
        if j > 0:
            head += " | "
        head += getRandomAtom(True)


    if headSize == 0:
        constraint.write(":-" + body + ".\n")
    else:
        encoding.write(head + ":-" + body + ".\n")
    usedVariables.clear()
nFacts = randint(0, maxNFacts)
for i in range(nFacts):
    predicate = randint(0, len(arieties)-1)
    instance.write("p_" + str(predicate) + "(")
    for j in range(arieties[predicate]):
        if j > 0:
            instance.write(",")
        instance.write(str(randint(0,maxConstant)))
    instance.write(").\n")
